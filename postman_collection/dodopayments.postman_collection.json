{
	"info": {
		"_postman_id": "88282c08-4026-4732-a55d-1b245dcfa7e9",
		"name": "Dodo Payments",
		"description": "APIs for creating and managing Users, Accounts and Transactions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36976530"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "signUp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - token\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.collectionVariables.set(\"authToken\", response.token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"abc bcd\",\n\t\"email\": \"abc@bcd5.com\",\n\t\"username\": \"abc5\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/signUp",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"signUp"
							]
						},
						"description": "Creates a new User\n\n#### Input\n\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| name | Required | name of the user. |\n| email | Required | email of user. Must be unique. |\n| username | Required | username of the user. Must be unique. |\n| password | Required | password of the user. |\n\n#### Output\n\n| Fields | Description |\n| --- | --- |\n| token | the JWT token for the user, which needs to be passed in the `Authorization` Header as `Bearer` token. It is valid for 1 hour. New tokens for this user can be generated by the `/signIn` API |"
					},
					"response": []
				},
				{
					"name": "signIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"",
									"pm.test(\"Token field exists in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token is in valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.collectionVariables.set(\"authToken\", response.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new_username\",\n    \"password\": \"new password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/signIn",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"signIn"
							]
						},
						"description": "Creates a new JWT token for an existing User which is valid for 1 hour\n\n#### Input\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| username | Required | username of the user. Must be unique. |\n| password | Required | password of the user. |\n\n#### Output\n|Fields|Description|\n|------|-----------|\n|token| the JWT token for the user, which needs to be passed in the `Authorization` Header as `Bearer` token. It is valid for 1 hour. |"
					},
					"response": []
				},
				{
					"name": "currentUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, email, and username\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('username');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}:8080/currentUser",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"currentUser"
							]
						},
						"description": "Fetches the details of the logged in User\n\n#### Output\n\n| Fields | Description |\n| --- | --- |\n| id | id of the logged in user. |\n| name | name of the logged in user. |\n| email | email of the logged in user. |\n| username | username of the logged in user. |"
					},
					"response": []
				},
				{
					"name": "updateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.name).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.username).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"new name\",\n    \"email\": \"new-email@abc.com\",\n    \"username\": \"new_username\",\n    \"password\": \"new password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/updateUser",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"updateUser"
							]
						},
						"description": "Updates the fields that are passed in the request for the logged in user.\n\n#### Input\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| name | Optional | name of the user. |\n| email | Optional | email of user. Must be unique. |\n| username | Optional | username of the user. Must be unique. |\n| password | Optional | password of the user. |\n\n#### Output\n\n| Fields | Description |\n| --- | --- |\n| id | id of the logged in user. |\n| name | name of the logged in user. |\n| email | email of the logged in user. |\n| username | username of the logged in user. |"
					},
					"response": []
				}
			],
			"description": "APIs for User management"
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "createAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.userId).to.exist;",
									"    pm.expect(responseData.accountNumber).to.exist;",
									"    pm.expect(responseData.balance).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id and userId are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
									"    pm.expect(responseData.userId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"UserId should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Account number is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.accountNumber).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Account number should be a non-negative integer\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"openingBalance\": \"100000.12\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/createAccount",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"createAccount"
							]
						},
						"description": "Creates a new Account\n\n#### Input\n\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| openingBalance | Optional | The initial balance of the account that is created. Defaults to 0 if not passed. |\n\n#### Output\n\n| Fields | Description |\n| --- | --- |\n| id | id of the account. |\n| userId | id of the user to which the account belongs to. |\n| accountNumber | account number of the account. |\n| balance | current balance in the account. |"
					},
					"response": []
				},
				{
					"name": "getAccountDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.userId).to.exist;",
									"    pm.expect(responseData.accountNumber).to.exist;",
									"    pm.expect(responseData.balance).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Account number is non-empty and a positive integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.accountNumber).to.exist.and.to.be.a('number').and.to.be.greaterThan(0);",
									"});",
									"",
									"",
									"pm.test(\"Balance is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.balance).to.match(/^\\d+(\\.\\d{1,10})?$/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": 6645311532\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/getAccountDetail",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"getAccountDetail"
							]
						},
						"description": "Fetches the account detail from account number for the logged in User\n#### Input\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| accountNumber | Required | The account number. It must be the account of the logged in User. |\n\n\n#### Output\n\n| Fields | Description |\n| --- | --- |\n| id | id of the account. |\n| userId | id of the user to which the account belongs to. |\n| accountNumber | account number of the account. |\n| balance | current balance in the account. |"
					},
					"response": []
				}
			],
			"description": "APIs for accounts"
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "createTransaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - credit and debit\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.credit).to.exist;",
									"    pm.expect(responseData.debit).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Credit id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.credit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Credit id should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Debit id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.debit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Debit id should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fromAccount\": 6645311532,\n    \"toAccount\": 7745653635,\n    \"amount\": \"100.12\",\n    \"description\": \"description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/createTransaction",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"createTransaction"
							]
						},
						"description": "Creates two new transactions one for the debit and one for the credit and updates the account balances respectively after checking if the debit account belongs to the logged in User and if it contains enough balance for the transaction.\n\n#### Input\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| fromAccount | Required | The account number of the sender. It must be the account of the logged in user. |\n| toAccount | Required | The account number of the receiver. It can belong to any user. |\n| amount | Required | The amount that needs to be transferred. |\n| description | Required | A description about the transaction. |\n\n\n#### Output\n\n| Fields | Description |\n| --- | --- |\n| credit | id for the CREDIT transaction |\n| debit | id for the DEBIT transaction |"
					},
					"response": []
				},
				{
					"name": "getTransactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(transaction) {",
									"        pm.expect(transaction).to.have.property('id');",
									"        pm.expect(transaction).to.have.property('accountId');",
									"        pm.expect(transaction).to.have.property('amount');",
									"        pm.expect(transaction).to.have.property('transactionType');",
									"        pm.expect(transaction).to.have.property('transactionDate');",
									"        pm.expect(transaction).to.have.property('description');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Amount is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(transaction) {",
									"        pm.expect(transaction.amount).to.match(/^\\d+(\\.\\d{1,10})?$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"TransactionDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(transaction) {",
									"        pm.expect(transaction.transactionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{6}(\\+\\d{2}:\\d{2}|Z)$/);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": 7745653635\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/getTransactions",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"getTransactions"
							]
						},
						"description": "Fetches the list of transaction for an account number, optionally, in a time range\n\n#### Input\n\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| accountNumber | Required | The account number to fetch the transactions for. It must be an account of the logged in user. |\n\n#### Output\n\nThe output consists of a list of objects. Below is a description of the object.\n\n| Fields | Description |\n| --- | --- |\n| id | transaction id |\n| accountId | id of the account that was affected by the transaction. |\n| amount | amount that was transferred. |\n| transactionType | type of transaction, CREDIT or DEBIT. |\n| transactionDate | time when the transaction was created. |\n| description | description of the transaction |"
					},
					"response": []
				},
				{
					"name": "getTransaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.accountId).to.exist;",
									"    pm.expect(responseData.amount).to.exist;",
									"    pm.expect(responseData.transactionType).to.exist;",
									"    pm.expect(responseData.transactionDate).to.exist;",
									"    pm.expect(responseData.description).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Transaction date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.transactionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{6}(\\+\\d{2}:\\d{2}|Z)$/, \"Transaction date should be in valid date format\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionId\": \"b41307422af04b4893087b855b046f02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:8080/getTransaction",
							"host": [
								"{{url}}"
							],
							"port": "8080",
							"path": [
								"getTransaction"
							]
						},
						"description": "Fetches transaction detail for a transaction id\n\n#### Input\n| Fields | Requirement | Description |\n| --- | --- | --- |\n| transactionId | Required | The transaction id of the transaction that needs to be fetched. |\n\n#### Output\n| Fields | Description |\n| --- | --- |\n| id | transaction id |\n| accountId | id of the account that was affected by the transaction. |\n| amount | amount that was transferred. |\n| transactionType | type of transaction, CREDIT or DEBIT. |\n| transactionDate | time when the transaction was created. |\n| description | description of the transaction |"
					},
					"response": []
				}
			],
			"description": "APIs for managing transactions"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "127.0.0.1"
		},
		{
			"key": "authToken",
			"value": " "
		}
	]
}